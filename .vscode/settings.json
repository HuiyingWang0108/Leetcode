{
    "java.project.sourcePaths": [
        "trie",
        "test",
        "string/partition",
        "string/maxPower",
        "string/longestPalindrome",
        "string/findAnagrams",
        "string/decodeString",
        "string/calculate",
        "stack",
        "reservoir",
        "palindrome/longestPalindrome",
        "myPow",
        "map/treeMap",
        "link/rotateLink",
        "link/reverseList",
        "link/removeNthFromEnd",
        "link/removeElements",
        "link/mergeTwoLists",
        "link/mergeKLists",
        "link/isPalindrome",
        "link/insertionSortList",
        "link/hasCycle",
        "link/getIntersectionNode",
        "link/deleteDuplicates",
        "link/addTwoNumbers",
        "integer/smallestRepunitDivByK",
        "integer/isPowerOfTwo",
        "integer/findComplement",
        "integer/divide",
        "integer/addBinary",
        "findLengthOfLCIS",
        "dp/minPathSum",
        "dp/minDistance",
        "dp/jump",
        "breadth_first",
        "array/twoPointers/minSubArrayLen",
        "array/twoPointers/maxSubArrayLen",
        "array/threeSumClosest",
        "array/singleNumber",
        "array/searchInsert",
        "array/search",
        "array/removeElement",
        "array/removeDuplicates",
        "array/rangeSumBST",
        "array/plusOne",
        "array/numPairsDivisibleBy60",
        "array/nextPermutation",
        "array/moveZeroes",
        "array/minimumSize",
        "array/mergeSortedArray",
        "array/mergeIntervals",
        "array/maximalSquare",
        "array/maxProfit",
        "array/maxCoins",
        "array/matrixReshape",
        "array/majorityElement",
        "array/intersection",
        "array/intersect",
        "array/findPeakElement",
        "array/findMedianSortedArray",
        "array/findJudge",
        "array/find132pattern",
        "array/canPartition",
        "array/atMostNGivenDigitSet",
        "array/PascalTriangle",
        "array/NumArray",
        "array/FindDisappearedNumbers.java",
        "Fibonacci",
        "DFS/sumRootToLeaf",
        "DFS/preorderTraversal",
        "DFS/postorderTraversal",
        "DFS/inorderTraversal",
        "DFS/getAllElements",
        "DFS/countNodes",
        "DFS/buildTree",
        "array/numberOfArithmeticSlices"
    ],
    "java.dependency.packagePresentation": "hierarchical"
}